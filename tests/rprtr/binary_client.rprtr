// simulate the prinbee binary server

print(message: "--- script started ---")

run()
listen(address: <127.0.0.1:20002>, connection_type: tcp)

print(message: "--- wait for PING ---")
call(label: func_expect_ping)

print(message: "--- send reply: PONG... ---")
call(label: func_send_pong)

call(label: func_send_help)
call(label: func_send_ready)

call(label: func_expect_commands)

call(label: func_expect_service_status)
call(label: func_send_status_of_fluid_settings)

// send a very early lock request that will be cached
call(label: func_send_lock_early)

call(label: func_send_unlock)

call(label: func_expect_fluid_settings_listen)
call(label: func_send_fluid_settings_registered)
call(label: func_send_fluid_settings_value_updated)
call(label: func_send_fluid_settings_ready)

// here pretend a client is checking on our status a little too soon
// (i.e. we'll get a "NO_LOCK" message)
//
call(label: func_send_lock_status)

call(label: func_expect_cluster_status)
call(label: func_send_cluster_up)
//call(label: func_send_cluster_complete) -- this does not currently happen because the message is tested (at least when we sent a CLUSTER_STATUS message, the broadcast may still send us the message, I think)
set_variable(name: info_mode, value: "info")
call(label: func_send_info)

call(label: func_expect_no_lock)
call(label: func_expect_lock_leaders)

// try a lock that already timed out
set_variable(name: timeout, value: 1000)
call(label: func_send_lock)

call(label: func_send_unlock_with_bad_pid)

call(label: func_expect_lock_started)
call(label: func_expect_lock_ready)

call(label: func_expect_early_locked)
call(label: func_send_early_unlock)

call(label: func_expect_cluckd_status_without_tickets)
call(label: func_expect_lock_failed)

now(variable_name: timeout)
set_variable(name: timeout, value: ${timeout} + 60) // now + 1 minute
call(label: func_send_lock_with_invalid_pid)
call(label: func_send_lock)
call(label: func_send_lock) // send it twice, the second time it generates a LOCK_FAILED (duplicate)

call(label: func_expect_early_unlocked)
call(label: func_expect_locked)
call(label: func_send_lock_leaders)

call(label: func_send_duplicate_add_ticket)

set_variable(name: info_mode, value: "debug")
call(label: func_send_info)

call(label: func_expect_lock_failed_duplicate)

call(label: func_expect_lock_failed_duplicate_add_ticket)

call(label: func_send_unlock_with_bad_server_name)
call(label: func_send_unlock_with_bad_object_name)

call(label: func_expect_cluckd_status_with_ticket)
call(label: func_expect_unlocking)
call(label: func_expect_unlocked)       // this one timed out


call(label: func_send_quitting)

call(label: func_drain_messages)
exit(error_message: "unexpectedly reached the end...")




// function: wait for next message
//
// if the wait times out, it is an error
// the function shows the message before returning
//
label(name: func_wait_message)
has_data(min_size: 16) // the message header is 16 bytes (see prinbee/network/binary_message.cpp)
if(true: already_got_next_message)
label(name: wait_for_a_message)
wait(timeout: 12, mode: wait)
has_data(min_size: 16)
if(false: wait_for_a_message) // woke up without a complete header, wait some more
label(name: already_got_next_message)
show_data(size: 16)
return()

// Function: send QUITTING and drain messages
label(name: func_drain_messages)
print(message: "--- Sending QUITTING and draining messages...")
clear_message()
has_message()
if(true: got_unexpected_message)
print(message: "--- Wait while draining messages...")
wait(timeout: 5, mode: drain)
has_message()
if(true: got_unexpected_message)
print(message: "--- Script is done...")
exit()
label(name: got_unexpected_message)
show_message()
exit(error_message: "got message while draining final send()")









// Function: expect PING
label(name: func_expect_ping)
print(message: "--- expect PING ---")
call(label: func_wait_message)
call(label: func_verify_ping)
return()

// Function: expect COMMANDS
label(name: func_expect_commands)
print(message: "--- expect COMMANDS ---")
call(label: func_wait_message)
call(label: func_verify_commands)
return()

// Function: expect SERVICE_STATUS
label(name: func_expect_service_status)
print(message: "--- expect SERVICE_STATUS ---")
call(label: func_wait_message)
call(label: func_verify_service_status)
return()

// Function: expect FLUID_SETTINGS_LISTEN
label(name: func_expect_fluid_settings_listen)
print(message: "--- expect FLUID_SETTINGS_LISTEN ---")
call(label: func_wait_message)
call(label: func_verify_fluid_settings_listen)
return()

// Functoin: expect CLUSTER_STATUS
label(name: func_expect_cluster_status)
print(message: "--- expect CLUSTER_STATUS ---")
call(label: func_wait_message)
call(label: func_verify_cluster_status)
return()

// Function: expect NO_LOCK
label(name: func_expect_no_lock)
print(message: "--- wait for message NO_LOCK ---")
call(label: func_wait_message)
call(label: func_verify_no_lock)
return()

// Function: expect LOCK_LEADERS
label(name: func_expect_lock_leaders)
print(message: "--- wait for message LOCK_LEADERS ---")
call(label: func_wait_message)
call(label: func_verify_lock_leaders)
return()

// Function: expect LOCK_STARTED
label(name: func_expect_lock_started)
print(message: "--- wait for message LOCK_STARTED ---")
call(label: func_wait_message)
call(label: func_verify_lock_started)
return()

// Function: expect LOCK_READY
label(name: func_expect_lock_ready)
print(message: "--- wait for message LOCK_READY ---")
call(label: func_wait_message)
call(label: func_verify_lock_ready)
return()

// Function: expect CLUCKD_STATUS (without tickets)
label(name: func_expect_cluckd_status_without_tickets)
print(message: "--- wait for message CLUCKD_STATUS (without tickets)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_without_tickets)
return()

// Function: expect CLUCKD_STATUS (with ticket)
label(name: func_expect_cluckd_status_with_ticket)
print(message: "--- wait for message CLUCKD_STATUS (with ticket)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_with_ticket)
return()

// Function: expect LOCK_FAILED
label(name: func_expect_lock_failed)
print(message: "--- wait for message LOCK_FAILED ---")
call(label: func_wait_message)
call(label: func_verify_lock_failed)
return()

// Function: expect LOCKED early
label(name: func_expect_early_locked)
print(message: "--- expect LOCKED (early) ---")
call(label: func_wait_message)
call(label: func_verify_locked_early)
return()

// Function: expect LOCKED
label(name: func_expect_locked)
print(message: "--- expect LOCKED ---")
call(label: func_wait_message)
call(label: func_verify_locked)
return()

// Function: expect LOCK_FAILED
label(name: func_expect_lock_failed_duplicate)
print(message: "--- wait for message LOCK_FAILED (duplicate) ---")
call(label: func_wait_message)
call(label: func_verify_lock_failed_duplicate)
return()

// Function: expect LOCK_FAILED
label(name: func_expect_lock_failed_duplicate_add_ticket)
print(message: "--- wait for message LOCK_FAILED (duplicate ADD_TICKET) ---")
call(label: func_wait_message)
call(label: func_verify_lock_failed_duplicate_add_ticket)
return()

// Function: expect UNLOCKED
label(name: func_expect_early_unlocked)
print(message: "--- expect UNLOCKED (early) ---")
call(label: func_wait_message)
call(label: func_verify_early_unlocked)
return()

// Function: expect UNLOCKED
label(name: func_expect_unlocked)
print(message: "--- expect UNLOCKED ---")
call(label: func_wait_message)
call(label: func_verify_unlocked)
return()

// Function:: expect UNLOCKING
label(name: func_expect_unlocking)
print(message: "--- expect UNLOCKING ---")
call(label: func_wait_message)
call(label: func_verify_unlocking)
return()









// Function: verify PING 
label(name: func_verify_ping)
verify_data(values: [
    0x62, 0x6D,             // bm
    0x01,                   // version
    0x00,                   // flags
    0x50, 0x49, 0x4E, 0x47, // message name PING
    0x00, 0x00, 0x00, 0x00, // size of buffer
    0x00, 0x00,             // header CRC16
    0xE6, 0xE6 ])           // buffer CRC16
return()

// Function: verify a LOCKED early reply
label(name: func_verify_locked_early)
verify_message(
	command: LOCKED,
	server: ${hostname},
	service: website,
	required_parameters: {
		object_name: "early_lock",
		timeout_date: `^[0-9]+(\\.[0-9]+)?$`,
		unlocked_date: `^[0-9]+(\\.[0-9]+)?$`
	})
return()

// Function: verify a LOCKED reply
label(name: func_verify_locked)
verify_message(
	command: LOCKED,
	server: ${hostname},
	service: website,
	required_parameters: {
		object_name: "lock1",
		timeout_date: `^[0-9]+(\\.[0-9]+)?$`,
		unlocked_date: `^[0-9]+(\\.[0-9]+)?$`
	})
return()

// Function: verify a COMMANDS reply
label(name: func_verify_commands)
verify_message(
	command: COMMANDS,
	required_parameters: {
		list: "ABSOLUTELY,ACTIVATE_LOCK,ADD_TICKET,ALIVE,CLUSTER_DOWN,CLUSTER_UP,DISCONNECTED,DROP_TICKET,FLUID_SETTINGS_DEFAULT_VALUE,FLUID_SETTINGS_DELETED,FLUID_SETTINGS_OPTIONS,FLUID_SETTINGS_READY,FLUID_SETTINGS_REGISTERED,FLUID_SETTINGS_UPDATED,FLUID_SETTINGS_VALUE,FLUID_SETTINGS_VALUE_UPDATED,GET_MAX_TICKET,HANGUP,HELP,INFO,INVALID,LEAK,LIST_TICKETS,LOCK,LOCK_ACTIVATED,LOCK_ENTERED,LOCK_ENTERING,LOCK_EXITING,LOCK_FAILED,LOCK_LEADERS,LOCK_STARTED,LOCK_STATUS,LOCK_TICKETS,LOG_ROTATE,MAX_TICKET,QUITTING,READY,RESTART,SERVICE_UNAVAILABLE,STATUS,STOP,TICKET_ADDED,TICKET_READY,UNKNOWN,UNLOCK"
	})
return()

// Function: verify SERVICE_STATUS
label(name: func_verify_service_status)
verify_message(
	command: SERVICE_STATUS,
	required_parameters: {
		service: 'fluid_settings'
	})
return()

// Function: verify a FLUID_SETTINGS_LISTEN
label(name: func_verify_fluid_settings_listen)
verify_message(
	command: FLUID_SETTINGS_LISTEN,
	required_parameters: {
		cache: "no;reply",
		names: "cluckd::server-name"
	})
return()

// Function: verify a NO_LOCK
label(name: func_verify_no_lock)
verify_message(
	command: NO_LOCK,
	server: ${hostname},
	service: website,
	required_parameters: {
		cache: "no"
	})
return()

// Function: verify a CLUSTER_STATUS
label(name: func_verify_cluster_status)
verify_message(
	command: CLUSTER_STATUS,
	service: communicatord)
return()

// Function: verify a LOCK_LEADERS
label(name: func_verify_lock_leaders)
verify_message(
	command: LOCK_LEADERS,
	service: "*",
	required_parameters: {
		election_date: `^[0-9]+(\\.[0-9]+)?$`,
		leader0: `^14\\|[0-9]+\\|127.0.0.1\\|[0-9]+\\|${hostname}$`
	},
	forbidden_parameters: {
		leader1,
		leader2
	})
return()

// Function: verify a LOCK_STARTED
label(name: func_verify_lock_started)
verify_message(
	command: LOCK_STARTED,
	service: "*",
	required_parameters: {
		election_date: `^[0-9]+(\\.[0-9]+)?$`,
		leader0: `^14\\|[0-9]+\\|127.0.0.1\\|[0-9]+\\|${hostname}$`,
		lock_id: `^14\\|[0-9]+\\|127.0.0.1\\|[0-9]+\\|${hostname}$`,
		server_name: ${hostname},
		start_time: `^[0-9]+(\\.[0-9]+)?$`
	},
	forbidden_parameters: {
		leader1,
		leader2
	})
// the leader0 parameter needs to be defined from what that leader sends us
save_parameter_value(parameter_name: lock_id, variable_name: leader0)
save_parameter_value(parameter_name: election_date, variable_name: election_date)
return()

// Function: verify a LOCK READY
label(name: func_verify_lock_ready)
verify_message(
	command: LOCK_READY,
	sent_service: cluckd,
	service: ".",
	required_parameters: {
		cache: no
	})
return()

// Function: verify CLUCKD_STATUS (without tickets)
label(name: func_verify_cluckd_status_without_tickets)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS: ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: ${hostname},
	service: website,
	required_parameters: {
		status: '{"computers":['
			+ '{"connected":true,"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":1,'
			+ '"neighbors_count":1,'
			+ '"neighbors_quorum":1}'
	})
return()

// Function: verify CLUCKD_STATUS (with ticket)
label(name: func_verify_cluckd_status_with_ticket)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS: ${cluckd_status}")
print(message: "--- timeout: ${timeout}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: ${hostname},
	service: website,
	required_parameters: {
		// we cannot use ${leader0} at the moment because it includes
		// pipes (|) and those are interpreted by the regex system
		//
		status: '{"computers":['
			+ '{"connected":true,"id":"' + "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":1,'
			+ '"neighbors_count":1,'
			+ '"neighbors_quorum":1,'
			+ '"tickets":"added_ticket=true'
				+ '|added_ticket_quorum=true'
				+ '|entering_key=' + "${hostname}" + '/123'
				+ '|get_max_ticket=true'
				+ '|lock_duration=10'
				+ '|lock_failed=none'
				+ '|lock_timeout_date=' + `[0-9]+(\\.[0-9]+)?`
				+ '|locked=true'
				+ '|object_name=lock1'
				+ '|obtention_timeout=' + `[0-9]+(\\.[0-9]+)?`
				+ '|our_ticket=1'
				+ '|owner=' + "${hostname}"
				+ '|serial=2'
				+ '|server_name=' + "${hostname}"
				+ '|service_name=website'
				+ '|tag=505'
				+ '|ticket_key=00000001/' + "${hostname}" + '/123'
				+ '|ticket_ready=true'
				+ '|unlock_duration=10\\n"}'
	})
return()

// Function: verify a LOCK FAILED
label(name: func_verify_lock_failed)
verify_message(
	command: LOCK_FAILED,
	server: ${hostname},
	service: "website",
	required_parameters: {
		error: "timedout",
		key: "${hostname}/123",
		object_name: "lock1",
		tag: 505
	})
return()

// Function: verify a LOCK FAILED (duplicate)
label(name: func_verify_lock_failed_duplicate)
verify_message(
	command: LOCK_FAILED,
	server: ${hostname},
	service: "website",
	required_parameters: {
		error: "duplicate",
		key: "${hostname}/123",
		object_name: "lock1",
		tag: 505
	})
return()

// Function: verify a LOCK_FAILED (duplicate ADD_TICKET)
label(name: func_verify_lock_failed_duplicate_add_ticket)
verify_message(
	command: LOCK_FAILED,
	sent_service: cluckd,
	server: rc1,
	service: cluckd,
	required_parameters: {
		error: "duplicate",
		key: "00000001/${hostname}/123",
		object_name: "lock1",
		tag: 505
	},
	optional_parameters: {
		description: "ADD_TICKET called with an existing ticket name and key"
	})
return()

// Function: verify a UNLOCKED (early)
label(name: func_verify_early_unlocked)
verify_message(
	command: UNLOCKED,
	server: ${hostname},
	service: "website",
	required_parameters: {
		object_name: "early_lock",
		tag: 15045,
		unlocked_date: `^[0-9]+(\\.[0-9]+)?$`
	})
return()

// Function: verify a UNLOCKED
label(name: func_verify_unlocked)
verify_message(
	command: UNLOCKED,
	server: ${hostname},
	service: "website",
	required_parameters: {
		error: "timedout",
		object_name: "lock1",
		tag: 505
	})
return()

// Function: verify a UNLOCKING
label(name: func_verify_unlocking)
verify_message(
	command: UNLOCKING,
	server: ${hostname},
	service: "website",
	required_parameters: {
		error: "timedout",
		object_name: "lock1",
		tag: 505
	})
return()

// Function: send PONG
label(name: func_send_pong)
send_data(values: [
    0x62, 0x6D,             // bm
    0x01,                   // version
    0x00,                   // flags
    0x50, 0x4F, 0x4E, 0x47, // message name PONG
    0x00, 0x00, 0x00, 0x00, // size of buffer
    0x00, 0x00,             // header CRC16
    0x00, 0x00 ])           // buffer CRC16
return()

// Function: send READY
label(name: func_send_ready)
send_message(
	command: READY,
	parameters: {
		my_address: "127.0.0.1"
	})
return()

// Function: send STATUS
label(name: func_send_status)
now(variable_name: now)
send_message(
	command: STATUS,
	parameters: {
		service: "cluckd",
		cache: no,
		server: "this_server",
		status: "up",
		up_since: ${now}
	})
return()

// Function: send UNLOCK too soon
//
// This function gets called too soon so the cluckd system generates an
// error and never replies--unfortunately, at the moment I do not check
// the logs so the test itself does not verify that the error occurs...
//
label(name: func_send_unlock)
send_message(
	command: UNLOCK,
	parameters: {
		object_name: "too_soon",
		tag: 11104,
		pid: 431
	})
return()

// Function: send UNLOCK with invalid pid
label(name: func_send_unlock_with_bad_pid)
send_message(
	command: UNLOCK,
	parameters: {
		object_name: "bad_pid",
		tag: 11104,
		pid: -431
	})
return()

// Function: send UNLOCK with invalid server name
label(name: func_send_unlock_with_bad_server_name)
send_message(
	command: UNLOCK,
	sent_server: another_server, // not the correct name (on purpose)
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "lock1",
		tag: 11104,
		pid: 435
	})
return()

// Function: send UNLOCK with invalid object name
label(name: func_send_unlock_with_bad_object_name)
send_message(
	command: UNLOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "unknown_lock",
		tag: 11104,
		pid: 435
	})
return()

// Function: send STATUS/fluid_settings
label(name: func_send_status_of_fluid_settings)
now(variable_name: now)
send_message(
	command: STATUS,
	parameters: {
		service: "fluid_settings",
		cache: no,
		server: ${hostname},
		status: "up",
		up_since: ${now}
	})
return()

// Function: send FLUID_SETTINGS_REGISTERED
label(name: func_send_fluid_settings_registered)
send_message(
	command: FLUID_SETTINGS_REGISTERED,
	server: ${hostname},
	service: cluckd)
return()

// Function: send FLUID_SETTINGS_VALUE_UPDATED
label(name: func_send_fluid_settings_value_updated)
send_message(
	command: FLUID_SETTINGS_VALUE_UPDATED,
	server: ${hostname},
	service: cluckd,
	parameters: {
		name: "cluckd::server-name",
		value: "this_very_server",
		message: "current value"
	})
return()

// Function: send FLUID_SETTINGS_READY
label(name: func_send_fluid_settings_ready)
send_message(
	command: FLUID_SETTINGS_READY,
	server: ${hostname},
	service: cluckd,
	parameters: {
		errcnt: 31
	})
return()

// Function: send LOCK_STATUS
label(name: func_send_lock_status)
send_message(
	command: LOCK_STATUS,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd)
return()

// Function: send INFO
// Parameters: ${info_mode} -- "info" or "debug"
label(name: func_send_info)
send_message(
	command: INFO,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		mode: ${info_mode}
	})
return()

// Function: send CLUSTER_UP
label(name: func_send_cluster_up)
send_message(
	command: CLUSTER_UP,
	//sent_server: ${hostname},
	//sent_service: communicatord,
	server: ${hostname},
	service: cluckd,
	parameters: {
		neighbors_count: 1
	})
return()

// Function: send CLUSTER_COMPLETE
label(name: func_send_cluster_complete)
send_message(
	command: CLUSTER_COMPLETE,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		neighbors_count: 1
	})
return()

// Function: send LOCK with invalid pid
// Parameters: ${timeout} -- when the LOCK request times out
label(name: func_send_lock_with_invalid_pid)
send_message(
	command: LOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "lock1",
		tag: 505,
		pid: -9123,
		duration: 10,
		timeout: ${timeout}
	})
return()

// Function: send LOCK (early)
label(name: func_send_lock_early)
now(variable_name: early_timeout)
set_variable(name: early_timeout, value: ${early_timeout} + 60) // now + 1 minute
send_message(
	command: LOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "early_lock",
		tag: 15045,
		pid: 10203,
		duration: 15,
		timeout: ${early_timeout}
	})
return()

label(name: func_send_lock_leaders)
print(message: "send LOCK_LEADERS")
send_message(
	command: LOCK_LEADERS,
	sent_server: rc1, // this does not make sense since we are supposed to have a single computer so a single cluckd...
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
		election_date: ${election_date},
		leader0: ${leader0}
	})
return()

label(name: func_send_early_unlock)
send_message(
	command: UNLOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "early_lock",
		tag: 15045,
		pid: 10203
	})
return()

// Function: send LOCK
// Parameters: ${timeout} -- when the LOCK request times out
label(name: func_send_lock)
send_message(
	command: LOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "lock1",
		tag: 505,
		pid: 123,
		duration: 10,
		timeout: ${timeout}
	})
return()

// Function: send ADD_TICKET (duplicate ticket & spurious since we have just one computer)
label(name: func_send_duplicate_add_ticket)
send_message(
	command: ADD_TICKET,
	sent_server: rc1,
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "lock1",
		key: "00000001/${hostname}/123",
		tag: 505,
		timeout: ${timeout}
	})
return()

// Function: send QUITTING
label(name: func_send_quitting)
send_message(
	command: QUITTING,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd)
return()

// vim: ts=4 et sw=4
