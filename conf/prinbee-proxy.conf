# Sample of Snap! Database configuration file
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# log_config=<path to log properties>
#
# This variable defines the properties that the snaplogger library reads
# to handle logging of the snapdatabase daemons.
#
# Default: /etc/snapwebsites/logger/snapdatabase.conf
log_config=/etc/snapwebsites/logger/snapdatabase.conf


# listen=<this computer private ip>
#
# The IP address this daemon uses to listen for connections.
#
# If you do not have a cluster and only access the database locally,
# you may just keep 127.0.0.1.
#
# At this point there is very little security in our service. Please, do
# not use your public IP address unless you are sure that there is
# necessary rules in your firewall to prevent unwanted access.
#
# Default: 127.0.0.1
listen=127.0.0.1


# nodes=<one or more private ips>
#
# This variable is a list of private IPs to other nodes running
# snapdatabases. Separate each IP with a comma.
#
# As nodes get connected, the nodes save the IPs in a list which gets
# updated. So this is just to kickstart that other list.
#
# Note: TODO: add info about tool(s) to remove a node because all lists
# need to be updated at once.
#
# Default: <empty>
nodes=


# context=<path where tables are saved>
#
# This parameter holds the path to the context. This is usually set to
# a folder under /var/lib/,,,
#
# Moving an existing context should work just fine as long as you update
# the configuration file accordingly (and stop the daemon before doing
# the move and restart it once the move is done).
#
# Default: /var/lib/snapwebsites/database
context=/var/lib/snapwebsites/database


# table_schema_path=<path>, <path>, ...
#
# Define one or more folders where the system looks for XML table
# definitions. This is how your context is built (i.e. there is no
# dynamic "create table" function).
#
# You may include multiple paths by separating them by a comma.
# Spaces are ignored.
#
# Default: /usr/lib/snapwebsites/tables
table_schema_path=/usr/lib/snapwebsites/tables


# workers=<count>
#
# This parameter defines the number of workers you want to have running
# on this node. In most cases, this should be a at least 16, even if
# you have less than 16 cores. With more than 16 cores, you may create
# at least one worker per core and up to two workers per core.
#
# The snapdatabase system runs using a batch mechanism. Each piece of work
# that needs to be done is defined in a batch object. Some jobs may take
# a little longer than others (seconds, even minutes when compressing or
# compacting) but in order to not block all of our jobs, the next step
# in each process is saved in a batch and added to the work queue. That
# way the next available worker can wake up and start working on the
# processing next step.
#
# Note: when a process gains an exclusive lock (i.e. read & write permissions)
# it will not release that lock until it is done, so that part of the
# processing will run in one go whatever amount of time is required to
# complete the task.
#
# Default: 16
workers=16


# vim: wrap
